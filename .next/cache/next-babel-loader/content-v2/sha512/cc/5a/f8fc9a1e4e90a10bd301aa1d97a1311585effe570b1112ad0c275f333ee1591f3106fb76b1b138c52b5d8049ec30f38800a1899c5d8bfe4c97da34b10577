{"ast":null,"code":"import { types } from \"../types\";\nimport axios from \"axios\";\nimport { apiRoutes } from \"../../utils/apiRoutes\";\nimport { setConfigurationRequest } from \"../../utils/requests\";\nimport moment from \"moment\";\nconst {\n  show_loader,\n  hide_loader,\n  get_membership,\n  get_previous_balance,\n  set_membership_balance,\n  get_movements,\n  get_movements_history\n} = types;\nexport const setSelectedMembership = membership => {\n  return {\n    type: types.select_membership,\n    payload: {\n      membership\n    }\n  };\n};\nexport const setSelectedMembershipPackage = membershipPackage => {\n  return {\n    type: types.select_membership_package,\n    payload: {\n      membershipPackage\n    }\n  };\n};\nexport const setMembershipOfCompany = membershipOfCompany => {\n  return {\n    type: types.set_membership_of_company,\n    payload: {\n      membershipOfCompany\n    }\n  };\n};\nexport const setMembershipBalance = membershipBalance => {\n  return {\n    type: types.set_membership_balance,\n    payload: {\n      membershipBalance\n    }\n  };\n};\nexport const getMembership = body => dispatch => {\n  dispatch({\n    type: show_loader\n  });\n  axios.post(`${apiRoutes.baseUrl}${apiRoutes.membership}`, body, setConfigurationRequest()).then(response => {\n    dispatch({\n      type: hide_loader\n    });\n    dispatch({\n      type: get_membership,\n      payload: {\n        membership: response.data.membresia\n      }\n    });\n  }).catch(error => {\n    console.log(error);\n    dispatch({\n      type: hide_loader\n    });\n  });\n};\nexport const getPrevBalance = body => dispatch => {\n  dispatch({\n    type: show_loader\n  });\n  axios.post(`${apiRoutes.baseUrl}${apiRoutes.baseCompanies}${apiRoutes.prevBalanceAaccount}`, body, setConfigurationRequest()).then(response => {\n    dispatch({\n      type: hide_loader\n    });\n    dispatch({\n      type: get_previous_balance,\n      payload: {\n        previousBalance: response.data.saldosToken,\n        payCentauros: response.data.abonos_centauros\n      }\n    }); // setPrevBalance(response.data.saldosToken);\n  }).catch(error => {\n    dispatch({\n      type: hide_loader\n    });\n    console.log(error);\n  });\n};\nexport const getMembershipBalance = body => dispatch => {\n  axios.post(`${apiRoutes.baseUrl}${apiRoutes.membership}${apiRoutes.balance}`, body, setConfigurationRequest()).then(response => {\n    dispatch({\n      type: set_membership_balance,\n      payload: {\n        membershipBalance: response.data.saldoMembresia\n      }\n    });\n  }).catch(error => {\n    dispatch({\n      type: hide_loader\n    });\n    console.log(error);\n  });\n};\nexport const get_YYYY_MM_DD_format = date => moment(date).format(\"YYYY-MM-DD\");\n\nconst createDates = date => {\n  let newDate = new Date();\n  const day = parseInt(date.split(\"-\")[date.split(\"-\").length - 1]);\n  newDate.setDate(day);\n  newDate = get_YYYY_MM_DD_format(newDate);\n  const todayOneMonthAgo = moment(newDate).subtract(1, \"months\").format(\"YYYY-MM-DD\");\n  return {\n    newDate,\n    todayOneMonthAgo\n  };\n};\n\nexport const getMovements = (membershipBalance, selectedCompany, data) => async (dispatch) => {\n  if (membershipBalance.fecha !== undefined) {\n    dispatch({\n      type: show_loader\n    });\n    const {\n      eDate,\n      sDate,\n      hierarchy,\n      mainTraveller\n    } = data;\n    let dataRequest;\n    dataRequest = {\n      compania_id: selectedCompany.id,\n      fecha_inicio: moment(sDate).format(\"YYYY-MM-DD\"),\n      fecha_fin: moment(eDate).format(\"YYYY-MM-DD\"),\n      huesped_id: mainTraveller,\n      jerarquia_id: hierarchy\n    };\n\n    try {\n      const response = await axios.post(`${apiRoutes.baseUrl}${apiRoutes.baseCompanies}${apiRoutes.movements}`, dataRequest, setConfigurationRequest());\n      dispatch({\n        type: hide_loader\n      });\n      dispatch({\n        type: get_movements,\n        payload: {\n          payWithToken: response.data.pagosToken,\n          payMarketPlace: response.data.pagosMP,\n          buyTokens: response.data.compraTokens,\n          devolutions: response.data.devoluciones\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: hide_loader\n      });\n      console.log(\"THIIIS IS THE ERROR\", error);\n    }\n  }\n};\nexport const getMovementsHistory = (selectedCompany, dates) => async (dispatch) => {\n  dispatch({\n    type: show_loader\n  });\n  let dataRequest;\n  const {\n    anio,\n    mes\n  } = dates;\n  console.log(\"Fechas\", dates);\n  dataRequest = {\n    compania_id: selectedCompany.id,\n    anio: anio,\n    mes: mes\n  };\n\n  try {\n    const response = await axios.post(`${apiRoutes.baseUrl}${apiRoutes.baseCompanies}${apiRoutes.historical}${apiRoutes.movements}`, dataRequest, setConfigurationRequest());\n    dispatch({\n      type: hide_loader\n    });\n    console.log(response.data);\n    dispatch({\n      type: get_movements_history,\n      payload: {\n        payWithToken: response.data.pagosToken,\n        payMarketPlace: response.data.pagosMP,\n        buyTokens: response.data.compraTokens,\n        //TODO FALTAN DEVOLUCIONES\n        //TODO CENTRO DE COSTOS\n        devolutions: [],\n        prevMembershipBalance: response.data.saldoMembresiaAnterior\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: hide_loader\n    });\n    console.log(\"ERROR MEMBERSHIP ACTION\", error.response);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}