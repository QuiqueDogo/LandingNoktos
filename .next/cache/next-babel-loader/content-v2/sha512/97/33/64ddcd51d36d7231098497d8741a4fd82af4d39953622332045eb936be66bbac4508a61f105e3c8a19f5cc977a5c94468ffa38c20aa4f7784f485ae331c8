{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../types\";\nimport * as moment from \"moment\";\nimport { compareDates } from \"../../utils/utils\";\nlet initState = {\n  membershipPackage: {\n    id: 2,\n    nombre: \"\",\n    costo_mensual: \"\",\n    costo_anual: \"\",\n    noches_gratis: \"\",\n    numero_tokens: \"\",\n    descuento: \"\",\n    valor_token: \"\",\n    es_activo: \"\",\n    created_at: \"\",\n    updated_at: \"\"\n  },\n  membership: {\n    id: 1,\n    catalogo_membresia: []\n  },\n  membershipBalance: {},\n  membershipOfCompany: {},\n  data: {},\n  previousBalance: {},\n  payWithToken: [],\n  payMarketPlace: [],\n  buyTokens: [],\n  totalMarketPlace: 0,\n  totalBuyTokens: 0,\n  movementsTokens: [],\n  totalUseTokens: 0,\n  totalBuyCentauros: 0,\n  totalUseCentauros: 0,\n  initialBalanceNoktos: 0,\n  initialBalanceCentauros: 0,\n  finalBalanceNoktos: 0,\n  finalBalanceCentauros: 0,\n  totalBuyTokensMoney: 0\n};\nconst {\n  get_membership,\n  get_previous_balance,\n  get_movements,\n  get_movements_history\n} = types;\n\nconst createMovementsFromPayWithTokenItems = payWithTokenItems => {\n  const movements = [];\n\n  for (let pagoToken of payWithTokenItems) {\n    let movement = {\n      fecha: pagoToken.created_at,\n      estado: pagoToken.reservacion.estado,\n      token_inicial: pagoToken.token_inicial,\n      token_gasto: pagoToken.token_gasto,\n      token_adquirido: pagoToken.token_ajuste > 0 ? `*${pagoToken.token_ajuste}` : '-',\n      token_fin: pagoToken.token_fin,\n      noches_gratis_inicial: pagoToken.noches_gratis_inicial,\n      noches_gratis_gasto: pagoToken.noches_gratis_gasto,\n      noches_gratis_fin: pagoToken.noches_gratis_fin,\n      noches_gratis_adquirido: pagoToken.noches_gratis_ajuste > 0 ? `*${pagoToken.noches_gratis_ajuste}` : '-',\n      created_at_original: pagoToken.reservacion.created_at_original,\n      total: '',\n      viajero: pagoToken.viajero,\n      reservante: pagoToken.reservante,\n      centro_costos: pagoToken.centro_costos,\n      descripcion: `Reservación en el hotel: ${pagoToken.host !== undefined ? pagoToken.host.nombre : ''} con número de reservación: ${pagoToken.reservacion !== undefined ? pagoToken.reservacion.codigo_reservacion : ''}`\n    };\n    movements.push(movement);\n  }\n\n  return movements;\n};\n\nconst createMovementsFromBuyTokensItems = buyTokensItems => {\n  const movements = [];\n\n  for (let compraToken of buyTokensItems) {\n    let movement = {\n      fecha: compraToken.created_at,\n      token_inicial: compraToken.token_inicial,\n      token_gasto: '',\n      token_adquirido: compraToken.token_adquirido,\n      token_fin: compraToken.token_fin,\n      noches_gratis_inicial: '',\n      noches_gratis_gasto: '',\n      noches_gratis_fin: '',\n      noches_gratis_adquirido: '',\n      total: compraToken.total,\n      descripcion: compraToken.brand !== null && compraToken.last_4 !== null ? `Adquisición de noktos en la plataforma con la tarjeta ${compraToken.brand} terminación  ${compraToken.last_4} ` : `Adquisición de noktos en la plataforma por medio de transferencia electrónica `\n    };\n    movements.push(movement);\n  }\n\n  return movements;\n};\n\nconst createMovementsFromDevolutionItems = devolutionItems => {\n  const movements = [];\n\n  for (let devolucionTokens of devolutionItems) {\n    let movement = {\n      fecha: devolucionTokens.updated_at,\n      token_inicial: devolucionTokens.token_inicial,\n      token_gasto: \"\",\n      token_adquirido: devolucionTokens.token_gasto,\n      token_fin: devolucionTokens.token_fin,\n      total: '',\n      descripcion: `Devolución de noktos `\n    };\n    movements.push(movement);\n  }\n\n  return movements;\n};\n\nfunction compareFromDates(a, b) {\n  const dateA = moment(a.fecha).format(\"YYYY-MM-DD\");\n  const dateB = moment(b.fecha).format(\"YYYY-MM-DD\");\n  let comparison = 0;\n\n  if (dateA > dateB) {\n    comparison = 1;\n  } else if (dateA < dateB) {\n    comparison = -1;\n  }\n\n  return comparison;\n}\n\nconst sumTotal = items => items.reduce((a, {\n  total\n}) => a + parseInt(total), 0);\n\nconst sumUseTokens = items => items.reduce((a, {\n  token_gasto\n}) => a + parseInt(token_gasto), 0);\n\nconst sumDevolutionTokens = items => items.reduce((a, {\n  token_ajuste\n}) => a + parseInt(token_ajuste), 0);\n\nconst sumBuyTokensMoney = items => items.reduce((a, {\n  total\n}) => a + parseFloat(total), 0);\n\nconst sumBuyTokens = items => items.reduce((a, {\n  token_adquirido\n}) => a + parseInt(token_adquirido), 0);\n\nconst sumBuyCentauros = items => items.reduce((a, {\n  noches_gratis_gasto\n}) => a + parseInt(noches_gratis_gasto), 0);\n\nconst sumUseCentauros = items => items.reduce((a, {\n  token_gasto\n}) => a + parseInt(token_gasto), 0);\n\nexport default ((state = initState, action) => {\n  var _mergedArrayOfBuysAnd, _mergedArrayOfBuysAnd2, _mergedArrayOfBuysAnd3, _mergedArrayOfBuysAnd4, _mergedArrayOfBuysAnd5, _mergedArrayOfBuysAnd6, _mergedArrayOfBuysAnd7, _mergedArrayOfBuysAnd8;\n\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case types.select_membership:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        membership: payload.membership\n      });\n\n    case types.select_membership_package:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        membershipPackage: payload.membershipPackage\n      });\n\n    case types.set_membership_balance:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        membershipBalance: payload.membershipBalance\n      });\n\n    case types.set_membership_of_company:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        membershipOfCompany: payload.membershipOfCompany\n      });\n\n    case get_membership:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: payload.membership\n      });\n\n    case get_previous_balance:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        previousBalance: payload.previousBalance,\n        totalBuyCentauros: payload.payCentauros\n      });\n\n    case get_movements:\n      let mergedArrayOfBuysAndSell = [...payload.payWithToken, ...payload.buyTokens];\n      const initialBalanceNoktos = (_mergedArrayOfBuysAnd = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd === void 0 ? void 0 : _mergedArrayOfBuysAnd.token_inicial;\n      const initialBalanceCentauros = ((_mergedArrayOfBuysAnd2 = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd2 === void 0 ? void 0 : _mergedArrayOfBuysAnd2.noches_gratis_inicial) !== undefined ? (_mergedArrayOfBuysAnd3 = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd3 === void 0 ? void 0 : _mergedArrayOfBuysAnd3.noches_gratis_inicial : (_mergedArrayOfBuysAnd4 = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd4 === void 0 ? void 0 : _mergedArrayOfBuysAnd4.noches_inicial;\n      const finalBalanceNoktos = (_mergedArrayOfBuysAnd5 = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd5 === void 0 ? void 0 : _mergedArrayOfBuysAnd5.token_fin;\n      const finalBalanceCentauros = ((_mergedArrayOfBuysAnd6 = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd6 === void 0 ? void 0 : _mergedArrayOfBuysAnd6.noches_gratis_fin) !== undefined ? (_mergedArrayOfBuysAnd7 = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd7 === void 0 ? void 0 : _mergedArrayOfBuysAnd7.noches_gratis_fin : (_mergedArrayOfBuysAnd8 = mergedArrayOfBuysAndSell[mergedArrayOfBuysAndSell.length - 1]) === null || _mergedArrayOfBuysAnd8 === void 0 ? void 0 : _mergedArrayOfBuysAnd8.noches_fin;\n      let movements = [...createMovementsFromPayWithTokenItems(payload.payWithToken), ...createMovementsFromBuyTokensItems(payload.buyTokens), ...createMovementsFromDevolutionItems(payload.devolutions)];\n      movements.sort(compareDates);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        payWithToken: payload.payWithToken,\n        payMarketPlace: payload.payMarketPlace,\n        buyTokens: payload.buyTokens,\n        movementsTokens: movements,\n        totalMarketPlace: sumTotal(payload.payMarketPlace),\n        totalBuyTokens: sumBuyTokens(payload.buyTokens),\n        totalBuyTokensMoney: sumBuyTokensMoney(payload.buyTokens),\n        totalUseTokens: sumUseTokens(payload.payWithToken) - sumDevolutionTokens(payload.payWithToken),\n        totalUseCentauros: sumBuyCentauros(payload.payWithToken),\n        initialBalanceNoktos: initialBalanceNoktos,\n        initialBalanceCentauros: initialBalanceCentauros,\n        finalBalanceNoktos: finalBalanceNoktos,\n        finalBalanceCentauros: finalBalanceCentauros\n      });\n\n    case get_movements_history:\n      let movementsHistory = [...createMovementsFromPayWithTokenItems(payload.payWithToken), ...createMovementsFromBuyTokensItems(payload.buyTokens), ...createMovementsFromDevolutionItems(payload.devolutions)];\n      movementsHistory.sort(compareDates);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        payWithToken: payload.payWithToken,\n        payMarketPlace: payload.payMarketPlace,\n        buyTokens: payload.buyTokens,\n        totalMarketPlace: sumTotal(payload.payMarketPlace),\n        totalBuyTokens: sumBuyTokens(payload.buyTokens),\n        movementsTokens: movementsHistory,\n        totalUseTokens: sumUseTokens(payload.payWithToken),\n        previousBalance: {\n          token_inicial: payload.prevMembershipBalance.saldo_token,\n          token_final: payload.prevMembershipBalance.saldo_token_inicial !== null ? payload.prevMembershipBalance.saldo_token_inicial : 0,\n          inicialCentauros: payload.prevMembershipBalance.saldo_noches_gratis,\n          finalCentauros: payload.prevMembershipBalance.saldo_noches_gratis_inicial !== null ? payload.prevMembershipBalance.saldo_noches_gratis_inicial : 0\n        },\n        membershipBalance: _objectSpread(_objectSpread({}, initState.membershipBalance), {}, {\n          saldo_token: payload.prevMembershipBalance.saldo_token\n        }),\n        totalUseCentauros: sumBuyCentauros(payload.payWithToken)\n      });\n\n    default:\n      return state;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}