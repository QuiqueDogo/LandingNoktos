{"ast":null,"code":"import { types } from \"../types\";\nimport { hideLoader, showLoader } from \"./application\";\nimport axios from \"axios\";\nimport { apiRoutes } from \"../../utils/apiRoutes\";\nimport Swal from \"sweetalert2\";\nimport { setConfigurationRequest } from \"./../../utils/requests\";\nexport var addCompanies = function addCompanies(companies) {\n  return {\n    type: types.add_companies,\n    payload: {\n      companies: companies\n    }\n  };\n};\nexport var addCompany = function addCompany(company) {\n  return function (dispatch) {\n    console.log(\"company from action\", company);\n    dispatch({\n      type: types.add_company,\n      payload: {\n        company: company\n      }\n    });\n  };\n};\n\nvar getInfoOfAddress = function getInfoOfAddress(cp, dispatch) {\n  var set_address_info = types.set_address_info,\n      show_loader = types.show_loader,\n      hide_loader = types.hide_loader;\n  dispatch({\n    type: show_loader\n  });\n  axios.get(\"\".concat(apiRoutes.baseUrl).concat(apiRoutes.infoCP, \"/\").concat(cp), {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  }).then(function (response) {\n    dispatch({\n      type: hide_loader\n    });\n    dispatch({\n      type: set_address_info,\n      payload: {\n        addressInfo: response.data\n      }\n    });\n  })[\"catch\"](function (error) {\n    dispatch({\n      type: hide_loader\n    });\n    Swal.fire({\n      title: \"Error\",\n      text: \"Error con el c\\xF3digo postal\",\n      icon: \"error\",\n      confirmButtonText: \"Ok\"\n    });\n    console.log(\"Este es el error de getInfoOfAddress\", error);\n  });\n};\n\nexport var setNewAdressFromCP = function setNewAdressFromCP(cp) {\n  return function (dispatch) {\n    getInfoOfAddress(cp, dispatch);\n  };\n};\nexport var getCompanyInfo = function getCompanyInfo(idCompany) {\n  return function (dispatch) {\n    dispatch({\n      type: showLoader\n    });\n    var token = localStorage.getItem(\"local_token\");\n    var config = {\n      headers: {\n        Authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n    var get_company_by_id = types.get_company_by_id;\n    axios.get(\"\".concat(apiRoutes.baseUrl).concat(apiRoutes.baseCompany, \"/\").concat(idCompany), config).then(function (response) {\n      getInfoOfAddress(response.data.informacion.codigo_postal, dispatch);\n      dispatch({\n        type: hideLoader\n      });\n      dispatch({\n        type: get_company_by_id,\n        payload: {\n          companyInfo: response.data.informacion\n        }\n      });\n    })[\"catch\"](function (error) {\n      console.log(error);\n      dispatch({\n        type: hideLoader\n      });\n    });\n  };\n};\nexport var updateCompanyInfo = function updateCompanyInfo(companyInfo, resetIsSubmiting, clearForm, redirect) {\n  return function (dispatch) {\n    var show_loader = types.show_loader,\n        hide_loader = types.hide_loader;\n    dispatch({\n      type: show_loader\n    });\n    axios.put(\"\".concat(apiRoutes.baseUrl).concat(apiRoutes.addCompany), JSON.stringify(companyInfo), setConfigurationRequest()).then(function (response) {\n      dispatch({\n        type: hide_loader\n      });\n\n      if (response.status === 200) {\n        clearForm();\n        getCompanies(dispatch);\n        Swal.fire({\n          title: \"Registro exitoso\",\n          text: \"Su compañía se modificó correctamente\",\n          icon: \"success\",\n          confirmButtonText: \"Ok\"\n        }).then(function () {\n          redirect(true);\n        });\n      } else {\n        resetIsSubmiting();\n        console.log(response);\n        Swal.fire({\n          title: \"Error\",\n          text: \"No se pudo realizar el registro\",\n          icon: \"error\",\n          confirmButtonText: \"Ok\"\n        });\n      }\n    })[\"catch\"](function (error) {\n      dispatch({\n        type: hide_loader\n      });\n      resetIsSubmiting();\n      var errorMessage = \"\";\n      Object.keys(error.response.data.errors).forEach(function (nameKey) {\n        errorMessage += \"\".concat(error.response.data.errors[nameKey], \" \\n\");\n      });\n      Swal.fire({\n        title: \"Error\",\n        text: \"No se pudo realizar el registro. \".concat(errorMessage),\n        icon: \"error\",\n        confirmButtonText: \"Ok\"\n      });\n    });\n  };\n};\n\nfunction getCompanies(dispatch) {\n  console.log(\"LOAD COMPANIES\");\n  dispatch(showLoader());\n  var token = localStorage.getItem(\"local_token\");\n  var config = {\n    headers: {\n      Authorization: \"Bearer \".concat(token),\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  };\n  axios.get(\"\".concat(apiRoutes.baseUrl).concat(apiRoutes.baseCompany), config).then(function (response) {\n    dispatch(hideLoader());\n    console.log(response.data);\n    dispatch(addCompanies(response.data));\n    dispatch(addCompany(response.data[0]));\n    localStorage.setItem(\"selected_company\", JSON.stringify(response.data[0]));\n  })[\"catch\"](function (error) {\n    dispatch(hideLoader());\n    console.log(error);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}