{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\n\nconst useBasicForm = (callback, validate, defaultValues) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({});\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: isSubmitting,\n    1: setIsSubmitting\n  } = useState(false);\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) callback();\n  }, [errors]);\n  useEffect(() => {\n    if (Object.keys(values).length > 0) setErrors(validate(values));\n  }, [values]);\n  useEffect(() => {\n    if (defaultValues) setValues(defaultValues);else setValues({});\n  }, [defaultValues]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setErrors(validate(values));\n\n    if (Object.keys(errors).length === 0) {\n      setIsSubmitting(true);\n    }\n  };\n\n  const handleChange = event => {\n    event.persist();\n\n    if (event.target.type === 'checkbox') {\n      setValues(values => _objectSpread(_objectSpread({}, values), {}, {\n        [event.target.name]: event.target.checked\n      }));\n    } else {\n      setValues(values => _objectSpread(_objectSpread({}, values), {}, {\n        [event.target.name]: event.target.value\n      }));\n    }\n  };\n\n  const setValue = (name, value) => {\n    setValues(values => _objectSpread(_objectSpread({}, values), {}, {\n      [name]: value\n    }));\n  };\n\n  function clearForm() {\n    setValues({});\n    setIsSubmitting(false);\n  }\n\n  function resetIsSubmiting() {\n    setIsSubmitting(false);\n  }\n\n  function setDefaultValues(values) {\n    setValues(values);\n  }\n\n  return {\n    handleChange,\n    handleSubmit,\n    setValue,\n    clearForm,\n    resetIsSubmiting,\n    setDefaultValues,\n    values,\n    setValues,\n    errors\n  };\n};\n\nexport default useBasicForm;","map":null,"metadata":{},"sourceType":"module"}