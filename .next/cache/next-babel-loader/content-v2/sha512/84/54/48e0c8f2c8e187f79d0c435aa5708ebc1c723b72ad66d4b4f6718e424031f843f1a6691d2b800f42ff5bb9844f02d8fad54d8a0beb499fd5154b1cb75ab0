{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Quique/Desktop/LandingCustomers/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:/Users/Quique/Desktop/LandingCustomers/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from '../types';\nvar initialState = {\n  travellers: [],\n  guests: [],\n  userPermissions: []\n};\nvar get_travellers = types.get_travellers,\n    get_guests = types.get_guests,\n    create_traveller = types.create_traveller,\n    get_permissions = types.get_permissions,\n    update_traveller = types.update_traveller,\n    update_guest = types.update_guest,\n    create_guest = types.create_guest,\n    get_cost_centers_by_user_id_and_company_id = types.get_cost_centers_by_user_id_and_company_id,\n    set_update_cost_centers = types.set_update_cost_centers,\n    update_cost_centers = types.update_cost_centers,\n    set_companies_in_guest = types.set_companies_in_guest;\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  var setItemsWithUpdatedItem = function setItemsWithUpdatedItem(items, newItem) {\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].id === newItem.id) {\n        items[i] = newItem;\n      }\n    }\n\n    return items;\n  };\n\n  switch (type) {\n    case get_travellers:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        travellers: payload.travellers\n      });\n\n    case create_traveller:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        travellers: [].concat(_toConsumableArray(state.travellers), [payload.newTraveller])\n      });\n\n    case create_guest:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        guests: [].concat(_toConsumableArray(state.guests), [payload.newGuest])\n      });\n\n    case get_guests:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        guests: payload.guests\n      });\n\n    case get_permissions:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userPermissions: payload.permissions\n      });\n\n    case update_traveller:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        travellers: setItemsWithUpdatedItem(state.travellers, payload.traveller)\n      });\n\n    case update_guest:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        guests: setItemsWithUpdatedItem(state.guests, payload.guest)\n      });\n\n    case get_cost_centers_by_user_id_and_company_id:\n      var userId = payload.userId,\n          costCenters = payload.costCenters;\n\n      var setCostCentersToCurrentTraveller = function setCostCentersToCurrentTraveller(traveller) {\n        if (traveller.id === userId) {\n          traveller.costCenters = costCenters;\n          return traveller;\n        } else {\n          return traveller;\n        }\n      };\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        travellers: state.travellers.map(function (traveller) {\n          return setCostCentersToCurrentTraveller(traveller);\n        })\n      });\n\n    case set_update_cost_centers:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        travellers: state.travellers.map(function (traveller) {\n          if (traveller.id === payload.userId) {\n            if (payload.costCenter.isChecked) {\n              traveller.costCenters.push(payload.costCenter);\n            } else {\n              traveller.costCenters = traveller.costCenters.filter(function (costCenter) {\n                return costCenter.id !== payload.costCenter.id;\n              });\n            }\n\n            return traveller;\n          } else {\n            return traveller;\n          }\n        })\n      });\n\n    case set_companies_in_guest:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        guests: state.guests.map(function (guest) {\n          if (guest.id === payload.guestId) {\n            guest.companies = payload.companies;\n            return guest;\n          } else {\n            return guest;\n          }\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}