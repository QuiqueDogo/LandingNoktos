{"ast":null,"code":"import { types } from \"../types\";\nimport { hideLoader, showLoader } from \"./application\";\nimport axios from \"axios\";\nimport { apiRoutes } from \"../../utils/apiRoutes\";\nimport Swal from \"sweetalert2\";\nimport { setConfigurationRequest } from \"./../../utils/requests\";\nexport const addCompanies = companies => {\n  return {\n    type: types.add_companies,\n    payload: {\n      companies\n    }\n  };\n};\nexport const addCompany = company => dispatch => {\n  console.log(\"company from action\", company);\n  dispatch({\n    type: types.add_company,\n    payload: {\n      company\n    }\n  });\n};\n\nconst getInfoOfAddress = (cp, dispatch) => {\n  const {\n    set_address_info,\n    show_loader,\n    hide_loader\n  } = types;\n  dispatch({\n    type: show_loader\n  });\n  axios.get(`${apiRoutes.baseUrl}${apiRoutes.infoCP}/${cp}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  }).then(response => {\n    dispatch({\n      type: hide_loader\n    });\n    dispatch({\n      type: set_address_info,\n      payload: {\n        addressInfo: response.data\n      }\n    });\n  }).catch(error => {\n    dispatch({\n      type: hide_loader\n    });\n    Swal.fire({\n      title: \"Error\",\n      text: `Error con el código postal`,\n      icon: \"error\",\n      confirmButtonText: \"Ok\"\n    });\n    console.log(\"Este es el error de getInfoOfAddress\", error);\n  });\n};\n\nexport const setNewAdressFromCP = cp => dispatch => {\n  getInfoOfAddress(cp, dispatch);\n};\nexport const getCompanyInfo = idCompany => dispatch => {\n  dispatch({\n    type: showLoader\n  });\n  const token = localStorage.getItem(\"local_token\");\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  };\n  const {\n    get_company_by_id\n  } = types;\n  axios.get(`${apiRoutes.baseUrl}${apiRoutes.baseCompany}/${idCompany}`, config).then(response => {\n    getInfoOfAddress(response.data.informacion.codigo_postal, dispatch);\n    dispatch({\n      type: hideLoader\n    });\n    dispatch({\n      type: get_company_by_id,\n      payload: {\n        companyInfo: response.data.informacion\n      }\n    });\n  }).catch(error => {\n    console.log(error);\n    dispatch({\n      type: hideLoader\n    });\n  });\n};\nexport const updateCompanyInfo = (companyInfo, resetIsSubmiting, clearForm, redirect) => dispatch => {\n  const {\n    show_loader,\n    hide_loader\n  } = types;\n  dispatch({\n    type: show_loader\n  });\n  axios.put(`${apiRoutes.baseUrl}${apiRoutes.addCompany}`, JSON.stringify(companyInfo), setConfigurationRequest()).then(response => {\n    dispatch({\n      type: hide_loader\n    });\n\n    if (response.status === 200) {\n      clearForm();\n      getCompanies(dispatch);\n      Swal.fire({\n        title: \"Registro exitoso\",\n        text: \"Su compañía se modificó correctamente\",\n        icon: \"success\",\n        confirmButtonText: \"Ok\"\n      }).then(() => {\n        redirect(true);\n      });\n    } else {\n      resetIsSubmiting();\n      console.log(response);\n      Swal.fire({\n        title: \"Error\",\n        text: \"No se pudo realizar el registro\",\n        icon: \"error\",\n        confirmButtonText: \"Ok\"\n      });\n    }\n  }).catch(error => {\n    dispatch({\n      type: hide_loader\n    });\n    resetIsSubmiting();\n    let errorMessage = \"\";\n    Object.keys(error.response.data.errors).forEach(nameKey => {\n      errorMessage += `${error.response.data.errors[nameKey]} \\n`;\n    });\n    Swal.fire({\n      title: \"Error\",\n      text: `No se pudo realizar el registro. ${errorMessage}`,\n      icon: \"error\",\n      confirmButtonText: \"Ok\"\n    });\n  });\n};\n\nfunction getCompanies(dispatch) {\n  console.log(\"LOAD COMPANIES\");\n  dispatch(showLoader());\n  const token = localStorage.getItem(\"local_token\");\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  };\n  axios.get(`${apiRoutes.baseUrl}${apiRoutes.baseCompany}`, config).then(response => {\n    dispatch(hideLoader());\n    console.log(response.data);\n    dispatch(addCompanies(response.data));\n    dispatch(addCompany(response.data[0]));\n    localStorage.setItem(\"selected_company\", JSON.stringify(response.data[0]));\n  }).catch(error => {\n    dispatch(hideLoader());\n    console.log(error);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}