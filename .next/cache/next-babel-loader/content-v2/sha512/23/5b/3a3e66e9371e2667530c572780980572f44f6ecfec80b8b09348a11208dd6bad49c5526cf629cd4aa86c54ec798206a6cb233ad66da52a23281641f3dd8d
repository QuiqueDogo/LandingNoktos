{"ast":null,"code":"import _defineProperty from \"C:/Users/Quique/Desktop/LandingCustomers/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/Quique/Desktop/LandingCustomers/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types } from \"../types\";\nvar save_cost_center = types.save_cost_center,\n    get_cost_centers = types.get_cost_centers,\n    update_center_cost = types.update_center_cost;\nvar initialState = {\n  data: []\n};\n\nvar setItemsWithUpdatedItem = function setItemsWithUpdatedItem(items, newItem) {\n  console.log(items);\n\n  for (var i = 0; i < items.length; i++) {\n    console.log(items[i]);\n\n    if (items[i].id === newItem.id) {\n      items[i] = newItem;\n    }\n  }\n\n  console.log(items);\n  return items;\n};\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case save_cost_center:\n      return {\n        data: [].concat(_toConsumableArray(state.data), [payload.newCostCenter])\n      };\n\n    case get_cost_centers:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: payload.costCenters\n      });\n\n    case update_center_cost:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: setItemsWithUpdatedItem(state.data, payload.centerCost)\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}