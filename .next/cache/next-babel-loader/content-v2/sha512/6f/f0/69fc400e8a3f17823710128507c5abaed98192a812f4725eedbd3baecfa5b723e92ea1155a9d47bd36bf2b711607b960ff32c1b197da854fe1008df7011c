{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../types\";\nlet initState = {\n  company: {\n    id: 0,\n    nombre: \"\",\n    rfc: \"\",\n    razon_social: \"\",\n    estatus_registro: 0,\n    id_membresia: 0,\n    nombre_membresia: \"\"\n  },\n  companies: [{\n    id: 0,\n    nombre: \"\",\n    rfc: \"\",\n    razon_social: \"\",\n    estatus_registro: 0,\n    id_membresia: 0,\n    nombre_membresia: \"\"\n  }],\n  info: {},\n  addressInfo: {},\n  cp_id: null\n};\nexport default ((state = initState, action) => {\n  const {\n    add_company,\n    add_companies,\n    get_company_by_id,\n    set_address_info\n  } = types;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case types.add_company:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        company: payload.company\n      });\n\n    case get_company_by_id:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        info: payload.companyInfo\n      });\n\n    case set_address_info:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addressInfo: payload.addressInfo,\n        cp_id: payload.addressInfo.colonia[0].cp_id\n      });\n\n    case types.add_companies:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        companies: payload.companies\n      });\n\n    default:\n      return state;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}