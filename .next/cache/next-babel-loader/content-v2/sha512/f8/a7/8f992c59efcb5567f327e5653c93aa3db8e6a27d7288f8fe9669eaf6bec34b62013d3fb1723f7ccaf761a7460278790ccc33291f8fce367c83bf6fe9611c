{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { types } from \"../types\";\nconst initialState = {\n  packages: [],\n  membership: {\n    valor_token: 0\n  },\n  selectedPackage: {\n    id: null,\n    numero_tokens: 0\n  },\n  paymentMethod: 1,\n  cards: [],\n  selectedCard: null,\n  showSavedCards: true,\n  showSelectedCard: false,\n  showStripeForm: false,\n  stripeError: null,\n  showSnackbar: false,\n  showProgress: false,\n  generateInvoice: false,\n  costCenterId: \"1\",\n  CDFI_Id: null,\n  flagReloadUserCards: \"\"\n};\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case types.set_noktos_packages:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        packages: payload.filter(noktosPackage => Number(noktosPackage.id) !== 7).map(packageNoktos => _objectSpread(_objectSpread({}, packageNoktos), {}, {\n          selectedPackages: 0\n        }))\n      });\n\n    case types.update_selected_packages:\n      const {\n        idPackage,\n        action\n      } = payload;\n      let packageToUpdate = [];\n\n      switch (action) {\n        case \"add\":\n          packageToUpdate = state.packages.map(packageNoktos => {\n            if (packageNoktos.id === idPackage) {\n              packageNoktos.selectedPackages++;\n            }\n\n            return packageNoktos;\n          });\n          break;\n\n        case \"subtract\":\n          packageToUpdate = state.packages.map(packageNoktos => {\n            if (packageNoktos.id === idPackage) {\n              if (packageNoktos.selectedPackages > 0) {\n                packageNoktos.selectedPackages--;\n              }\n            }\n\n            return packageNoktos;\n          });\n          break;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        packages: [...packageToUpdate]\n      });\n\n    case types.delete_selected_packages:\n      let packageChange = [];\n      const {\n        idPackageSelected\n      } = payload;\n      packageChange = state.packages.map(packageNoktos => {\n        if (idPackageSelected === packageNoktos.id) {\n          packageNoktos.selectedPackages = 0;\n        }\n\n        return packageNoktos;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        packages: [...packageChange]\n      });\n\n    case types.set_user_membership:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        membership: payload\n      });\n\n    case types.set_selected_package:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedPackage: payload\n      });\n\n    case types.set_package_payment_method:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        paymentMethod: payload\n      });\n\n    case types.set_stripe_cards_info:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cards: payload\n      });\n\n    case types.set_selected_card:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedCard: payload\n      });\n\n    case types.show_saved_cards:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showSavedCards: true\n      });\n\n    case types.hide_saved_cards:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showSavedCards: false\n      });\n\n    case types.show_selected_card:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showSelectedCard: true\n      });\n\n    case types.hide_selected_card:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showSelectedCard: false\n      });\n\n    case types.show_stripe_form_card:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showStripeForm: true\n      });\n\n    case types.hide_stripe_form_card:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showStripeForm: false\n      });\n\n    case types.set_stripe_error:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stripeError: payload\n      });\n\n    case types.show_alert_stripe_error:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showSnackbar: true\n      });\n\n    case types.hide_alert_stripe_error:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showSnackbar: false\n      });\n\n    case types.show_progress_save_stripe_card:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showProgress: true\n      });\n\n    case types.hide_progress_save_stripe_card:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showProgress: false\n      });\n\n    case types.set_generate_invoice:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        generateInvoice: payload\n      });\n\n    case types.set_cost_center_id:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        costCenterId: payload\n      });\n\n    case types.set_CDFI_id:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        CDFI_Id: payload\n      });\n\n    case types.get_reload_user_cards:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        flagReloadUserCards: payload\n      });\n\n    default:\n      return state;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}